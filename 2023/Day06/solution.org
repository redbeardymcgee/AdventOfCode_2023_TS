#+PROPERTY: header-args :tangle solution.ts :comments both

* Imports
#+NAME: imports
#+BEGIN_SRC typescript
import { readData } from '../utils'
#+END_SRC

* Types
#+NAME: types
#+BEGIN_SRC typescript
type Race = {
  time: number
  distance: number
}
#+END_SRC

* Sample Inputs
#+NAME: sample1
#+BEGIN_SRC typescript
const sample1: string[] = `Time:      7  15   30
Distance:  9  40  200
`
  .trim()
  .split('\n')
#+END_SRC

#+NAME: sample2
#+BEGIN_SRC typescript
const sample2: string[] = sample1
#+END_SRC

* Part 1
#+NAME: part1
#+BEGIN_SRC typescript
function parse(input: string[]): Race[] {
  const races = input.map(line => line.split(':').map(part => part.trim()))
  const times = races[0][1]
    .split(' ')
    .map(time => time.trim())
    .filter(Boolean)
    .map(time => Number(time))
  const dist = races[1][1]
    .split(' ')
    .map(dist => dist.trim())
    .filter(Boolean)
    .map(time => Number(time))
  return times.map((_, idx) => ({ time: times[idx], distance: dist[idx] }))
}

function runRace(race: Race): number[] {
  const time = race.time
  const recordToBeat = race.distance

  let distances = []
  for (let holdTime = 1; holdTime < time; holdTime++) {
    const travel = (time - holdTime) * holdTime
    if (travel > recordToBeat) distances.push(travel)
  }

  return distances
}

function part1(input: string[]): number {
  const races = parse(input)
  const travelTimes = races.map(race => runRace(race))
  const totalWins = travelTimes.map(time => time.length)

  return totalWins.reduce((product, winsAmount) => product * winsAmount, 1)
}

// console.log(part1(sample1))
// console.log(part1(readData(__dirname)))
#+END_SRC

* Part 2
#+NAME: part2
#+BEGIN_SRC typescript
function part2(input: string[]): number {
  const races = parse(input)
  const time = Number(races.map(race => race.time).join(''))
  const distance = Number(races.map(race => race.distance).join(''))
  return runRace({ time, distance }).length

}
// console.log(part2(sample2))
// console.log(part2(readData(__dirname)))
#+END_SRC

* Tests
#+NAME: tests
#+BEGIN_SRC typescript
describe(__dirname, () => {
  const input = readData(__dirname)

  test('part 1', () => {
    expect(part1(sample1)).toBe(288)
    expect(part1(input)).toBe(219849)
  })

  test('part 2', () => {
    expect(part2(sample2)).toBe(71503)
    expect(part2(input)).toBe(29432455)
  })
})
#+END_SRC
