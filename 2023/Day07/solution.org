#+PROPERTY: header-args :tangle solution.ts :comments both

* Imports
#+NAME: imports
#+BEGIN_SRC typescript
import { readData } from '../utils'
#+END_SRC

* Types
#+NAME: types
#+BEGIN_SRC typescript
type Hand = {
  cards: string
  bids: number
}

enum HandStrength = {
  HighCard,
  OnePair,
  TwoPair,
  ThreeOfAKind,
  FullHouse,
  FiveOfAKind,
}

enum CardStrength = {
  2 = 1,
  3 = 2,
  4 = 3,
  5 = 4,
  6 = 5,
  7 = 6,
  8 = 7,
  9 = 8,
  T = 9,
  J = 10,
  Q = 11,
  K = 12,
  A = 13,
}

type CardStrengthStrings = keyof typeof CardStrength

#+END_SRC

* Sample Inputs
#+NAME: sample1
#+BEGIN_SRC typescript
const sample1: string[] = `32T3K 765
T55J5 684
KK677 28
KTJJT 220
QQQJA 483
`
  .trim()
  .split('\n')
#+END_SRC

#+NAME: sample2
#+BEGIN_SRC typescript
const sample2: string[] = `
`
  .trim()
  .split('\n')
#+END_SRC

* Part 1
#+NAME: part1
#+BEGIN_SRC typescript
function part1(input: string[]): number {
  return 0
}
#+END_SRC

* Part 2
#+NAME: part2
#+BEGIN_SRC typescript
function part2(input: string[]): number {
  return 0
}
#+END_SRC

* Tests
#+NAME: tests
#+BEGIN_SRC typescript
describe(__dirname, () => {
  const input = readData(__dirname)

  test('part 1', () => {
    expect(part1(sample1)).toBe(6440)
    expect(part1(input)).toBe(0)
  })

  test('part 2', () => {
    expect(part2(sample2)).toBe(0)
    expect(part2(input)).toBe(0)
  })
})
#+END_SRC
